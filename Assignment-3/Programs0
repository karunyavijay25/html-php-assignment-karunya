71. Tell the different file handling modes available in PHP?
ANSWER:
<?php
// Q71: Demonstrating different file handling modes in PHP
$filename = "demo.txt";
// Creating a file with write mode
$file = fopen($filename, "w"); // "w" - write mode
fwrite($file, "Hello, this is a test file.\n");
fclose($file);
// Opening file in append mode
$file = fopen($filename, "a"); // "a" - append mode
fwrite($file, "Appending a new line.\n");
fclose($file);
// Opening file in read mode
$file = fopen($filename, "r"); // "r" - read mode
echo "Reading file contents:<br>";
while(!feof($file)) {
    echo fgets($file). "<br>";
}
fclose($file);
// Displaying file handling modes
echo "<br><b>Common File Modes in PHP:</b><br>";
echo "r  - Read only<br>";
echo "w  - Write only (truncates file)<br>";
echo "a  - Append only<br>";
echo "r+ - Read/Write<br>";
echo "w+ - Read/Write (truncates file)<br>";
echo "a+ - Read/Write (append)<br>";
?>
OUTPUT:
Reading file contents:
Hello, this is a test file.
Appending a new line.
Common File Modes in PHP:
r  - Read only
w  - Write only (truncates file)
a  - Append only
r+ - Read/Write
w+ - Read/Write (truncates file)
a+ - Read/Write (append)
72. Write the PHP program to implement the following session functions.
(i)session_register() (ii) session_unset() (iii) session_destroy()
ANSWER:
<?php
// Q72: Demonstrating session functions
session_start();
// Registering session variables
$_SESSION['username'] = "JohnDoe";
$_SESSION['role'] = "Admin";
echo "Session variables are set.<br>";
echo "Username: " . $_SESSION['username'] . "<br>";
echo "Role: " . $_SESSION['role'] . "<br>";
// Unset a session variable
session_unset(); // removes all session variables
echo "All session variables are removed.<br>";
// Destroying the session completely
session_destroy();
echo "Session destroyed.<br>";
?>
OUTPUT:Session variables are set.
Username: JohnDoe
Role: Admin
All session variables are removed.
Session destroyed.
73. Develop a PHP program to display an error message when a file other than jpg or png is uploaded
<?php
// Q73: File upload validation
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $file_type = strtolower(pathinfo($_FILES["file"]["name"], PATHINFO_EXTENSION));
    
    if ($file_type != "jpg" && $file_type != "png") {
        echo "Error: Only JPG and PNG files are allowed.";
    } else {
        echo "File uploaded successfully!";
    }
}
?>
<!-- HTML Upload Form -->
<form method="POST" enctype="multipart/form-data">
  Select file to upload:
  <input type="file" name="file" required>
  <input type="submit" value="Upload">
</form>
OUTPUT:
Output (case 1 - wrong file type):
Error: Only JPG and PNG files are allowed.
Output (case 2 - correct file type):
File uploaded successfully!
74. Outline the file reading and writing functions of PHP with suitable examples.
<?php
$file = "sample.txt";
// Writing to a file
file_put_contents($file, "This is the first line.\n", FILE_APPEND);
file_put_contents($file, "This is the second line.\n", FILE_APPEND);
// Reading file content
echo "<b>Reading file with file_get_contents:</b><br>";
echo nl2br(file_get_contents($file));
// Using fopen, fread, fwrite
$fp = fopen($file, "a+"); 
fwrite($fp, "Appending another line using fwrite.\n");
rewind($fp); // move pointer to beginning
echo "<br><b>Reading using fread:</b><br>";
echo nl2br(fread($fp, filesize($file)));
fclose($fp);
?>
OUTPUT:
Reading file with file_get_contents:
This is the first line.
This is the second line.
Reading using fread:
This is the first line.
This is the second line.
Appending another line using fwrite.
75. Build a PHP function that takes the filename and a new line of content as input. Append the new line of content as a new line at the end of the file.
<?php
function appendLineToFile($filename, $newLine) {
    $file = fopen($filename, "a"); // open in append mode
    fwrite($file, $newLine . "\n");
    fclose($file);
    echo "Line appended successfully.<br>";
}
// Usage
$file = "notes.txt";
appendLineToFile($file, "This is a new line.");
appendLineToFile($file, "Another line added.");
// Displaying file content
echo "<b>File Content:</b><br>";
echo nl2br(file_get_contents($file));
?>
Output:
Line appended successfully.
Line appended successfully.
File Content:
This is a new line.
Another line added.
76. Write a simple 'birthday countdown' script, the script will count the number of days between current day and birthday.
<?php
// Q76: Birthday Countdown Script
$today = date("Y-m-d");
$birthday = "2025-12-25"; // Example birthday
$diff = strtotime($birthday) - strtotime($today);
$days = floor($diff / (60*60*24));
echo "Today: $today <br>";
echo "Birthday: $birthday <br>";
echo "Days left for birthday: $days days";
?>
OUTPUT:
Today: 2025-08-16
Birthday: 2025-12-25
Days left for birthday: 131 days
77. Classify the various network functions which provide network information or functions.
<?php
// Q77: Demonstrating some network functions]
echo "IP Address of localhost: " . gethostbyname("localhost") . "<br>";
echo "Host name of 8.8.8.8: " . gethostbyaddr("8.8.8.8") . "<br>";
echo "Check if www.google.com is reachable: " . gethostbyname("www.google.com") . "<br>";
$server_ip = gethostbyname("example.com");
echo "IP of example.com: $server_ip<br>";
if (checkdnsrr("example.com", "MX")) {
    echo "example.com has a mail server.<br>";
} else {
    echo "example.com has no mail server.<br>";
}
?>
OUTPUT:
IP Address of localhost: 127.0.0.1
Host name of 8.8.8.8: dns.google
Check if www.google.com is reachable: 142.251.223.228
IP of example.com: 23.192.228.80
example.com has a mail server.
78. Elucidate the steps to read and delete existing cookies in the browser.
<?php
// Q78: Working with cookies

// Step 1: Set a cookie
setcookie("user", "Alice", time()+3600); // expires in 1 hour

// Step 2: Read a cookie
if(isset($_COOKIE['user'])) {
    echo "Cookie value: " . $_COOKIE['user'] . "<br>";
} else {
    echo "Cookie not set yet.<br>";
}

// Step 3: Delete a cookie
setcookie("user", "", time()-3600); // expired
echo "Cookie deleted.";
?>
OUTPUT:
Cookie not set yet.
Cookie deleted.
79. Create a PHP program to append two files in another file.
<?php
// Q79: Append contents of two files into a new file

$file1 = "file1.txt";
$file2 = "file2.txt";
$outputFile = "merged.txt";

// Create demo files
file_put_contents($file1, "This is content of file 1.\n");
file_put_contents($file2, "This is content of file 2.\n");

// Merge
$content = file_get_contents($file1) . file_get_contents($file2);
file_put_contents($outputFile, $content);

echo "Files merged successfully.<br>";
echo "<b>Merged File Content:</b><br>";
echo nl2br(file_get_contents($outputFile));
?>
OUTPUT:
Files merged successfully.
Merged File Content:
This is content of file 1.
This is content of file 2.
80. Build a test cookie with the setcookie( ) function using PHP. Give me big code and understanding the concept ,with the output.
<?php
// Q80: Setting and reading a test cookie
setcookie("TestCookie", "HelloCookie", time()+3600); // 1 hour expiry\
if(isset($_COOKIE['TestCookie'])) {
    echo "Cookie value: " . $_COOKIE['TestCookie'];
} else {
    echo "Cookie not set yet. Refresh the page.";
}
?>
OUTPUT:
Output (first load):
Cookie not set yet. Refresh the page.
Output (after refresh):
Cookie value: HelloCookie
81. Create Admin Login, Logout form using session variables in PHP. 
<?php
session_start(); // Start session at the beginning// Step 1: Define admin credentials (for demo purpose, in real use DB)
$admin_username = "admin";
$admin_password = "12345";
// Step 2: Handle logout
if (isset($_GET['logout'])) {
    session_unset();     // remove session variables
    session_destroy();   // destroy session
    header("Location: admin_login.php"); // redirect back to login
  exit();
}
// Step 3: Handle login form submission
$error = "";
if (isset($_POST['login'])) {
    $username = trim($_POST['username']);
    $password = trim($_POST['password']);
    if ($username === $admin_username && $password === $admin_password) {
        // Valid login â†’ store session variable
        $_SESSION['admin'] = $username;
        header("Location: admin_login.php"); // refresh page to show dashboard
        exit();
    } else {
        $error = "Invalid Username or Password!";
    }
}
// Step 4: If logged in, show Dashboard, else show Login Form
?>
<!DOCTYPE html>
<html>
<head>
    <title>Admin Login - PHP Session Example</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f0f2f5;
            text-align: center;
            margin-top: 50px;
        }
        .container {
            width: 350px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px #aaa;
        }
        input[type=text], input[type=password] {
            width: 90%;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #aaa;
        }
        input[type=submit], a.logout {
            background: #007bff;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
        }
        .error { color: red; }
    </style>
</head>
<body>

<div class="container">
<?php
if (isset($_SESSION['admin'])) {
    //  Dashboard view
    echo "<h2>Welcome, " . $_SESSION['admin'] . "!</h2>";
    echo "<p>You are now logged in as Admin.</p>";
    echo "<a href='admin_login.php?logout=true' class='logout'>Logout</a>";
} else {
    // ðŸ”‘ Login form
    echo "<h2>Admin Login</h2>";
    if ($error != "") {
        echo "<p class='error'>$error</p>";
    }
    echo '<form method="POST" action="">
            <input type="text" name="username" placeholder="Enter Username" required><br>
            <input type="password" name="password" placeholder="Enter Password" required><br>
            <input type="submit" name="login" value="Login">
          </form>';
}
?>
</div>
</body>
</html>
OUTPUT:
Login Form (when not logged in)
Admin Login
[ Username Box ]
[ Password Box ]
[ Login Button ]
After Successful Login
Welcome, admin!
You are now logged in as Admin.[ Logout ]
82. Implement the setcookie( ) function with various arguments using the PHP program.
<?php
// Cookie with default parameters
setcookie("user", "Madhunisha");
// Cookie with expiry (1 hour)
setcookie("session_id", "ABC123", time() + 3600);
// Cookie with path restriction
setcookie("path_cookie", "restricted", time() + 3600, "/")
// Cookie with domain restriction
setcookie("domain_cookie", "example_cookie", time() + 3600, "/", "localhost");
// Cookie with secure and httponly
setcookie("secure_cookie", "securevalue", time() + 3600, "/", "", true, true);
echo "Cookies have been set!";
?>
OUTPUT:
Cookies have been set
 83. Develop a PHP script to accept email addresses and validate it. Display the domain name of the email and result of validation. 
<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $email = $_POST['email'];
    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
        echo "Valid Email Address.<br>";
        $domain = substr(strrchr($email, "@"), 1);
        echo "Domain: " . $domain;
    } else {
        echo "Invalid Email Address!";
    }
}
?>
<form method="post">
Enter Email: <input type="text" name="email">
<input type="submit" value="Check">
</form>
84. Implement a PHP program that creates sessions, sets values in sessions, and removes data from the sessions. 
<?php
session_start();
// Set Session Variables
$_SESSION["username"] = "Madhunisha";
$_SESSION["role"] = "Student";
// Display Session
echo "Username: " . $_SESSION["username"] . "<br>";
echo "Role: " . $_SESSION["role"] . "<br>";
// Remove one variable
unset($_SESSION["role"]);
// Destroy all session
// session_destroy();
?
OUTPUT:
Username: Madhunisha
Role: Student
85. List the steps to get file name from a path in PHP.
<?php
$path = "C:/xampp/htdocs/uploads/file1.txt";
echo "Full Path: $path<br>";
echo "File Name: " . basename($path) . "<br>";
echo "File Name without Extension: " . pathinfo($path, PATHINFO_FILENAME) . "<br>";
?>
OUTPUT:
Full Path: C:/xampp/htdocs/uploads/file.txt
File Name: file.txt
File Name without Extension: file
86. PHP File functions with example program. 
<?php
$filename = "example.txt";
// Writing to a file
file_put_contents($filename, "Hello, PHP File Handling!\n");
// Appending to a file
file_put_contents($filename, "Adding another line.\n", FILE_APPEND);
// Reading file
$content = file_get_contents($filename);
echo nl2br($content);\
// Deleting file
// unlink($filename);
?>
OUTPUT:
Hello, PHP File Handling!
Adding another line.
OUTPUT:   
88. Generate a simple PHP 'birthday countdown' script, the script will count the number of days between current day and birthday. 
<?php
$birthday = strtotime("2025-12-25"); // Example Birthday
$today = time();
$diff = $birthday - $today;
$days = floor($diff / (60 * 60 * 24));
echo "Your birthday is in $days days!";
?>
OUTPUT:
Your birthday is in 131 days!
89. Construct a PHP program to read a file using file operation. 
<?php
$filename = "data.txt";
if (file_exists($filename)) {
    $content = file($filename); // reads line by line
    foreach ($content as $line) {
        echo htmlspecialchars($line) . "<br>";
    }
} else {
    echo "File does not exist!";
}
?>
OUTPUT:
Hello World
This is a test file
90. Write a PHP program to open a text file and print all the data in it.
<?php
$filename = "data.txt";
$handle = fopen($filename, "r");
while (!feof($handle)) {
    echo fgets($handle) . "<br>";
}
fclose($handle);
?> 
91. Recognize how sessions are stored in PHP? 
â€¢	Sessions are stored server-side (in temporary files or memory).
â€¢	A session ID is stored on the client (via cookie PHPSESSID).
â€¢	Example:
o	$_SESSION['user'] = 'Admin' â†’ stored in /tmp/sess_abcd123.
92. Apply the various steps involved to get cookie value using server-side scripting.
<?php
setcookie("username", "Madhunisha", time() + 3600);

if (isset($_COOKIE["username"])) {
    echo "Cookie Value: " . $_COOKIE["username"];
} else {
    echo "Cookie not set!";
}
?>
OUTPUT:
Cookie Value: Madhunisha
 93. Write a PHP program that keeps track of how many times a visitor has loaded the page. 
<?php
session_start();
if (!isset($_SESSION['visits'])) {
    $_SESSION['visits'] = 1;
} else {
    $_SESSION['visits']++;
}
echo "You have visited this page " . $_SESSION['visits'] . " times.";
?>
OUTPUT:
You have visited this page 1 times.
94. Evaluate the different file handling modes available in PHP with appropriate examples. 
Mode	Description
r	Read only
w	Write (truncate)
a	Append
x	Create new file, write only
r+	Read/Write
w+	Read/Write (truncate)
a+	Read/Append
EXAMPLE:
<?php
$handle = fopen("demo.txt", "a+");
fwrite($handle, "Adding text in append mode.\n");
rewind($handle);
echo fread($handle, filesize("demo.txt"));
fclose($handle);
?>
OUTPUT:
Hello, this is a test file. Appending a new line. Adding text in append mode.
95. Discuss the purpose and functionality of PHP sessions and outline their potential application in maintaining a user's shopping cart state across multiple pages.
<?php
session_start();
// Add item to cart
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}
$_SESSION['cart'][] = "Apple";
// Display cart
echo "Shopping Cart: <br>";
foreach ($_SESSION['cart'] as $item) {
    echo "- " . $item . "<br>";
}
?>
OUTPUT:
Shopping Cart:
- Apple
96. How to register a variable in a PHP session? Give an example.
<?php
// Q.96: Registering a variable in a PHP session
session_start(); // Start session
// Registering session variable
$_SESSION['username'] = "Madhunisha";
$_SESSION['role'] = "Admin";
echo "<h2>Q.96: Register Session Variable</h2>";
echo "Username stored in session: " . $_SESSION['username'] . "<br>";
echo "Role stored in session: " . $_SESSION['role'] . "<br>";
?>
Output:
Q.96: Register Session Variable
Username stored in session: Madhunisha
Role stored in session: Admin
97. Discover the various session functions of PHP. Explain its behavior.
ANSWER:
<?php
// Q.97: Session functions demonstration

session_start(); 
$_SESSION['test'] = "Hello Session";

echo "<h2>Q.97: PHP Session Functions</h2>";

// session_id()
echo "Session ID: " . session_id() . "<br>";

// session_name()
echo "Session Name: " . session_name() . "<br>";

// session_status()
$status = session_status();
if ($status == PHP_SESSION_DISABLED) echo "Sessions are disabled<br>";
elseif ($status == PHP_SESSION_NONE) echo "Sessions are enabled, but none exists<br>";
elseif ($status == PHP_SESSION_ACTIVE) echo "Sessions are enabled, and one exists<br>";

// session_unset()
session_unset(); // removes all variables
echo "After session_unset(), variable 'test' is: " . ($_SESSION['test'] ?? "Not found") . "<br>";

// session_destroy()
session_destroy();
echo "Session destroyed.";
?>
OUTPUT:
Q.97: PHP Session Functions
Session ID: cbiq7np9sroiknhatr4ntthlaf
Session Name: PHPSESSID
Sessions are enabled, and one exists
After session_unset(), variable 'test' is: Not found
Session destroyed.
98. Model an Admin Login, Logout form using session variables in PHP. 
<?php
session_start();

$admin_username = "admin";
$admin_password = "12345";

if (isset($_GET['logout'])) {
    session_destroy();
    header("Location: q98.php");
    exit();
}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if ($_POST['username'] === $admin_username && $_POST['password'] === $admin_password) {
        $_SESSION['loggedin'] = true;
        $_SESSION['username'] = $_POST['username'];
        header("Location: q98.php");
        exit();
    } else {
        $error = "Invalid Username or Password!";
    }
}
?>
<!DOCTYPE html>
<html>
<head><title>Q.98 Admin Login</title></head>
<body>
<?php if (!isset($_SESSION['loggedin'])): ?>
    <h2>Admin Login</h2>
    <?php if(isset($error)) echo "<p style='color:red'>$error</p>"; ?>
    <form method="post">
        Username: <input type="text" name="username"><br>
        Password: <input type="password" name="password"><br>
        <input type="submit" value="Login">
    </form>
<?php else: ?>
    <h2>Welcome, <?php echo $_SESSION['username']; ?></h2>
    <a href="?logout=true">Logout</a>
<?php endif; ?>
</body>
</html>
99. Build a PHP program to apply the following tasks using session.
(a) Initiate a session (or pick up an existing one).
(b) Check for the existence of a pre-existing entry in $_SESSION. If not present, assume 
that the session is new.
(c) Increment a counter that tracks how many times that the user has visited this page.
(d) Store the incremented counter back in $_SESSION.
(e) Provide a link back to the page itself, embedding the session ID as an argument if it is 
found.
(f) Using PHP, construct a program to restrict the user from uploading the same file again 
and again. If the same file already exists in that folder, display an appropriate error 
message.
<?php
// Q.99: Session tracking and file upload restriction

session_start();

// (a) Start session
echo "<h2>Q.99 Session Handling</h2>";

// (b) Check if counter exists
if (!isset($_SESSION['counter'])) {
    $_SESSION['counter'] = 0;
    echo "New session started.<br>";
}

// (c) Increment counter
$_SESSION['counter']++;

// (d) Store counter
echo "You have visited this page " . $_SESSION['counter'] . " times.<br>";

// (e) Link back with session id
echo "<a href='q99.php?" . SID . "'>Reload Page</a><br>";

// (f) File upload restriction
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $target = "uploads/" . basename($_FILES["file"]["name"]);
    if (file_exists($target)) {
        echo "<p style='color:red'>Error: File already exists!</p>";
    } else {
        move_uploaded_file($_FILES["file"]["tmp_name"], $target);
        echo "<p style='color:green'>File uploaded successfully!</p>";
    }
}
?>
<form method="post" enctype="multipart/form-data">
    <input type="file" name="file">
    <input type="submit" value="Upload File">
</form>
100. Using PHP, construct a program to restrict the user from uploading the same file again and again. 
If the same file already exists in that folder, display an appropriate error message.
<?php
// Q.100: Prevent duplicate file upload

$target = "uploads/" . basename($_FILES["file"]["name"]);

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (file_exists($target)) {
        echo "<h3 style='color:red'>File already exists. Try another file.</h3>";
    } else {
        move_uploaded_file($_FILES["file"]["tmp_name"], $target);
        echo "<h3 style='color:green'>File uploaded successfully.</h3>";
    }
}
?>
<form method="post" enctype="multipart/form-data">
    <input type="file" name="file">
    <input type="submit" value="Upload">
</form>
101. Identify, how a cookieâ€™s value can be retrieved in a web application?
<?php
// Q.101: Cookie retrieval
setcookie("user", "Madhunisha", time() + 3600); // 1 hour
echo "<h2>Q.101: Cookie Value</h2>";
if (isset($_COOKIE['user'])) {
    echo "Cookie 'user' is set. Value = " . $_COOKIE['user'];
} else {
    echo "Cookie not set yet.";
}
?>
102. Develop a PHP program to use session variables and start a session.
<?php
// Q.102: Using session variables
session_start();

$_SESSION['language'] = "PHP";
$_SESSION['topic'] = "Session Variables";

echo "<h2>Q.102: Using Sessions</h2>";
echo "Language: " . $_SESSION['language'] . "<br>";
echo "Topic: " . $_SESSION['topic'] . "<br>";
?>
OUTPUT:
Q.102: Using Sessions
Language: PHP
Topic: Session Variables
103. Create a very simple pageview counter by using â€˜issetâ€™ to check if the pageview variable hasalready been created.
<?php
// Q.103: Simple pageview counter using isset
session_start();

if (!isset($_SESSION['views'])) {
    $_SESSION['views'] = 1;
} else {
    $_SESSION['views']++;
}

echo "<h2>Q.103 Page View Counter</h2>";
echo "You have visited this page " . $_SESSION['views'] . " times.";
?>
OUTPUT:
Q.103 Page View Counter
You have visited this page 1 times.
104. Formulate a PHP program to open a text file and print the nth line in the text file if then'th line does not exist print 'no data'. 
<?php
// Q.104: Print nth line from file
$filename = "sample.txt";
$n = 3; // Example: print 3rd line
$lines = file($filename, FILE_IGNORE_NEW_LINES);
if (isset($lines[$n-1])) {
    echo "<h2>Q.104: Line $n</h2>";
    echo $lines[$n-1];
} else {
    echo "No data";
}
?>
OUTPUT:Q.104: Line 3
Appending another line using fwrite.
105. Write a PHP function to get the start and end date of a week (by week number) of a particular year. Sample week and year: 12, 2014.give me the answers for this in big code and covering the concept and give the output within
<?php
// Q.105: Start and End date of a week by year
function getWeekDateRange($week, $year) {
    $dto = new DateTime();
    $dto->setISODate($year, $week);
    $start = $dto->format('Y-m-d');
    $dto->modify('+6 days');
    $end = $dto->format('Y-m-d');
    return [$start, $end];
}
list($start, $end) = getWeekDateRange(12, 2014);
echo "<h2>Q.105: Week 12 of 2014</h2>";
echo "Start Date: $start <br>";
echo "End Date: $end";
?>
OUTPUT:
Start Date: 2014-03-17
End Date: 2014-03-23
